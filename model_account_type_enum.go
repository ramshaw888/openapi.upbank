/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AccountTypeEnum Specifies the type of bank account. Currently returned values are `SAVER` and `TRANSACTIONAL`. 
type AccountTypeEnum string

// List of AccountTypeEnum
const (
	SAVER AccountTypeEnum = "SAVER"
	TRANSACTIONAL AccountTypeEnum = "TRANSACTIONAL"
)

// All allowed values of AccountTypeEnum enum
var AllowedAccountTypeEnumEnumValues = []AccountTypeEnum{
	"SAVER",
	"TRANSACTIONAL",
}

func (v *AccountTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountTypeEnum(value)
	for _, existing := range AllowedAccountTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountTypeEnum", value)
}

// NewAccountTypeEnumFromValue returns a pointer to a valid AccountTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountTypeEnumFromValue(v string) (*AccountTypeEnum, error) {
	ev := AccountTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountTypeEnum: valid values are %v", v, AllowedAccountTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountTypeEnum) IsValid() bool {
	for _, existing := range AllowedAccountTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountTypeEnum value
func (v AccountTypeEnum) Ptr() *AccountTypeEnum {
	return &v
}

type NullableAccountTypeEnum struct {
	value *AccountTypeEnum
	isSet bool
}

func (v NullableAccountTypeEnum) Get() *AccountTypeEnum {
	return v.value
}

func (v *NullableAccountTypeEnum) Set(val *AccountTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountTypeEnum(val *AccountTypeEnum) *NullableAccountTypeEnum {
	return &NullableAccountTypeEnum{value: val, isSet: true}
}

func (v NullableAccountTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

