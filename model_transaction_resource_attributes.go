/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TransactionResourceAttributes struct for TransactionResourceAttributes
type TransactionResourceAttributes struct {
	// The current processing status of this transaction, according to whether or not this transaction has settled or is still held. 
	Status TransactionStatusEnum `json:"status"`
	// The original, unprocessed text of the transaction. This is often not a perfect indicator of the actual merchant, but it is useful for reconciliation purposes in some cases. 
	RawText NullableString `json:"rawText"`
	// A short description for this transaction. Usually the merchant name for purchases. 
	Description string `json:"description"`
	// Attached message for this transaction, such as a payment message, or a transfer note. 
	Message NullableString `json:"message"`
	// Boolean flag set to true on transactions that support the use of categories. 
	IsCategorizable bool `json:"isCategorizable"`
	// If this transaction is currently in the `HELD` status, or was ever in the `HELD` status, the `amount` and `foreignAmount` of the transaction while `HELD`. 
	HoldInfo HoldInfoObject `json:"holdInfo"`
	// Details of how this transaction was rounded-up. If no Round Up was applied this field will be `null`. 
	RoundUp RoundUpObject `json:"roundUp"`
	// If all or part of this transaction was instantly reimbursed in the form of cashback, details of the reimbursement. 
	Cashback CashbackObject `json:"cashback"`
	// The amount of this transaction in Australian dollars. For transactions that were once `HELD` but are now `SETTLED`, refer to the `holdInfo` field for the original `amount` the transaction was `HELD` at. 
	Amount MoneyObject `json:"amount"`
	// The foreign currency amount of this transaction. This field will be `null` for domestic transactions. The amount was converted to the AUD amount reflected in the `amount` of this transaction. Refer to the `holdInfo` field for the original `foreignAmount` the transaction was `HELD` at. 
	ForeignAmount MoneyObject `json:"foreignAmount"`
	// The date-time at which this transaction settled. This field will be `null` for transactions that are currently in the `HELD` status. 
	SettledAt NullableTime `json:"settledAt"`
	// The date-time at which this transaction was first encountered. 
	CreatedAt time.Time `json:"createdAt"`
}

// NewTransactionResourceAttributes instantiates a new TransactionResourceAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionResourceAttributes(status TransactionStatusEnum, rawText NullableString, description string, message NullableString, isCategorizable bool, holdInfo HoldInfoObject, roundUp RoundUpObject, cashback CashbackObject, amount MoneyObject, foreignAmount MoneyObject, settledAt NullableTime, createdAt time.Time) *TransactionResourceAttributes {
	this := TransactionResourceAttributes{}
	this.Status = status
	this.RawText = rawText
	this.Description = description
	this.Message = message
	this.IsCategorizable = isCategorizable
	this.HoldInfo = holdInfo
	this.RoundUp = roundUp
	this.Cashback = cashback
	this.Amount = amount
	this.ForeignAmount = foreignAmount
	this.SettledAt = settledAt
	this.CreatedAt = createdAt
	return &this
}

// NewTransactionResourceAttributesWithDefaults instantiates a new TransactionResourceAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionResourceAttributesWithDefaults() *TransactionResourceAttributes {
	this := TransactionResourceAttributes{}
	return &this
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for TransactionStatusEnum will be returned
func (o *TransactionResourceAttributes) GetStatus() TransactionStatusEnum {
	if o == nil {
		var ret TransactionStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetStatusOk() (*TransactionStatusEnum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransactionResourceAttributes) SetStatus(v TransactionStatusEnum) {
	o.Status = v
}

// GetRawText returns the RawText field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TransactionResourceAttributes) GetRawText() string {
	if o == nil || o.RawText.Get() == nil {
		var ret string
		return ret
	}

	return *o.RawText.Get()
}

// GetRawTextOk returns a tuple with the RawText field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetRawTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RawText.Get(), o.RawText.IsSet()
}

// SetRawText sets field value
func (o *TransactionResourceAttributes) SetRawText(v string) {
	o.RawText.Set(&v)
}

// GetDescription returns the Description field value
func (o *TransactionResourceAttributes) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TransactionResourceAttributes) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TransactionResourceAttributes) SetDescription(v string) {
	o.Description = v
}

// GetMessage returns the Message field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TransactionResourceAttributes) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}

	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// SetMessage sets field value
func (o *TransactionResourceAttributes) SetMessage(v string) {
	o.Message.Set(&v)
}

// GetIsCategorizable returns the IsCategorizable field value
func (o *TransactionResourceAttributes) GetIsCategorizable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCategorizable
}

// GetIsCategorizableOk returns a tuple with the IsCategorizable field value
// and a boolean to check if the value has been set.
func (o *TransactionResourceAttributes) GetIsCategorizableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsCategorizable, true
}

// SetIsCategorizable sets field value
func (o *TransactionResourceAttributes) SetIsCategorizable(v bool) {
	o.IsCategorizable = v
}

// GetHoldInfo returns the HoldInfo field value
// If the value is explicit nil, the zero value for HoldInfoObject will be returned
func (o *TransactionResourceAttributes) GetHoldInfo() HoldInfoObject {
	if o == nil {
		var ret HoldInfoObject
		return ret
	}

	return o.HoldInfo
}

// GetHoldInfoOk returns a tuple with the HoldInfo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetHoldInfoOk() (*HoldInfoObject, bool) {
	if o == nil || o.HoldInfo == nil {
		return nil, false
	}
	return &o.HoldInfo, true
}

// SetHoldInfo sets field value
func (o *TransactionResourceAttributes) SetHoldInfo(v HoldInfoObject) {
	o.HoldInfo = v
}

// GetRoundUp returns the RoundUp field value
// If the value is explicit nil, the zero value for RoundUpObject will be returned
func (o *TransactionResourceAttributes) GetRoundUp() RoundUpObject {
	if o == nil {
		var ret RoundUpObject
		return ret
	}

	return o.RoundUp
}

// GetRoundUpOk returns a tuple with the RoundUp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetRoundUpOk() (*RoundUpObject, bool) {
	if o == nil || o.RoundUp == nil {
		return nil, false
	}
	return &o.RoundUp, true
}

// SetRoundUp sets field value
func (o *TransactionResourceAttributes) SetRoundUp(v RoundUpObject) {
	o.RoundUp = v
}

// GetCashback returns the Cashback field value
// If the value is explicit nil, the zero value for CashbackObject will be returned
func (o *TransactionResourceAttributes) GetCashback() CashbackObject {
	if o == nil {
		var ret CashbackObject
		return ret
	}

	return o.Cashback
}

// GetCashbackOk returns a tuple with the Cashback field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetCashbackOk() (*CashbackObject, bool) {
	if o == nil || o.Cashback == nil {
		return nil, false
	}
	return &o.Cashback, true
}

// SetCashback sets field value
func (o *TransactionResourceAttributes) SetCashback(v CashbackObject) {
	o.Cashback = v
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for MoneyObject will be returned
func (o *TransactionResourceAttributes) GetAmount() MoneyObject {
	if o == nil {
		var ret MoneyObject
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetAmountOk() (*MoneyObject, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionResourceAttributes) SetAmount(v MoneyObject) {
	o.Amount = v
}

// GetForeignAmount returns the ForeignAmount field value
// If the value is explicit nil, the zero value for MoneyObject will be returned
func (o *TransactionResourceAttributes) GetForeignAmount() MoneyObject {
	if o == nil {
		var ret MoneyObject
		return ret
	}

	return o.ForeignAmount
}

// GetForeignAmountOk returns a tuple with the ForeignAmount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetForeignAmountOk() (*MoneyObject, bool) {
	if o == nil || o.ForeignAmount == nil {
		return nil, false
	}
	return &o.ForeignAmount, true
}

// SetForeignAmount sets field value
func (o *TransactionResourceAttributes) SetForeignAmount(v MoneyObject) {
	o.ForeignAmount = v
}

// GetSettledAt returns the SettledAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *TransactionResourceAttributes) GetSettledAt() time.Time {
	if o == nil || o.SettledAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.SettledAt.Get()
}

// GetSettledAtOk returns a tuple with the SettledAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributes) GetSettledAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SettledAt.Get(), o.SettledAt.IsSet()
}

// SetSettledAt sets field value
func (o *TransactionResourceAttributes) SetSettledAt(v time.Time) {
	o.SettledAt.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *TransactionResourceAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TransactionResourceAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TransactionResourceAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o TransactionResourceAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["rawText"] = o.RawText.Get()
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["message"] = o.Message.Get()
	}
	if true {
		toSerialize["isCategorizable"] = o.IsCategorizable
	}
	if o.HoldInfo != nil {
		toSerialize["holdInfo"] = o.HoldInfo
	}
	if o.RoundUp != nil {
		toSerialize["roundUp"] = o.RoundUp
	}
	if o.Cashback != nil {
		toSerialize["cashback"] = o.Cashback
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.ForeignAmount != nil {
		toSerialize["foreignAmount"] = o.ForeignAmount
	}
	if true {
		toSerialize["settledAt"] = o.SettledAt.Get()
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionResourceAttributes struct {
	value *TransactionResourceAttributes
	isSet bool
}

func (v NullableTransactionResourceAttributes) Get() *TransactionResourceAttributes {
	return v.value
}

func (v *NullableTransactionResourceAttributes) Set(val *TransactionResourceAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResourceAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResourceAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResourceAttributes(val *TransactionResourceAttributes) *NullableTransactionResourceAttributes {
	return &NullableTransactionResourceAttributes{value: val, isSet: true}
}

func (v NullableTransactionResourceAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResourceAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


