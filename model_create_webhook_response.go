/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateWebhookResponse Successful response after creating a webhook. 
type CreateWebhookResponse struct {
	// The webhook that was created. 
	Data WebhookResource `json:"data"`
}

// NewCreateWebhookResponse instantiates a new CreateWebhookResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWebhookResponse(data WebhookResource) *CreateWebhookResponse {
	this := CreateWebhookResponse{}
	this.Data = data
	return &this
}

// NewCreateWebhookResponseWithDefaults instantiates a new CreateWebhookResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWebhookResponseWithDefaults() *CreateWebhookResponse {
	this := CreateWebhookResponse{}
	return &this
}

// GetData returns the Data field value
func (o *CreateWebhookResponse) GetData() WebhookResource {
	if o == nil {
		var ret WebhookResource
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookResponse) GetDataOk() (*WebhookResource, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CreateWebhookResponse) SetData(v WebhookResource) {
	o.Data = v
}

func (o CreateWebhookResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableCreateWebhookResponse struct {
	value *CreateWebhookResponse
	isSet bool
}

func (v NullableCreateWebhookResponse) Get() *CreateWebhookResponse {
	return v.value
}

func (v *NullableCreateWebhookResponse) Set(val *CreateWebhookResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWebhookResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWebhookResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWebhookResponse(val *CreateWebhookResponse) *NullableCreateWebhookResponse {
	return &NullableCreateWebhookResponse{value: val, isSet: true}
}

func (v NullableCreateWebhookResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWebhookResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


