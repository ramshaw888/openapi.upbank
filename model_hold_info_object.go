/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HoldInfoObject Provides information about the amount at which a transaction was in the `HELD` status. 
type HoldInfoObject struct {
	// The amount of this transaction while in the `HELD` status, in Australian dollars. 
	Amount MoneyObject `json:"amount"`
	// The foreign currency amount of this transaction while in the `HELD` status. This field will be `null` for domestic transactions. The amount was converted to the AUD amount reflected in the `amount` field. 
	ForeignAmount MoneyObject `json:"foreignAmount"`
}

// NewHoldInfoObject instantiates a new HoldInfoObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHoldInfoObject(amount MoneyObject, foreignAmount MoneyObject) *HoldInfoObject {
	this := HoldInfoObject{}
	this.Amount = amount
	this.ForeignAmount = foreignAmount
	return &this
}

// NewHoldInfoObjectWithDefaults instantiates a new HoldInfoObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldInfoObjectWithDefaults() *HoldInfoObject {
	this := HoldInfoObject{}
	return &this
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for MoneyObject will be returned
func (o *HoldInfoObject) GetAmount() MoneyObject {
	if o == nil {
		var ret MoneyObject
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HoldInfoObject) GetAmountOk() (*MoneyObject, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *HoldInfoObject) SetAmount(v MoneyObject) {
	o.Amount = v
}

// GetForeignAmount returns the ForeignAmount field value
// If the value is explicit nil, the zero value for MoneyObject will be returned
func (o *HoldInfoObject) GetForeignAmount() MoneyObject {
	if o == nil {
		var ret MoneyObject
		return ret
	}

	return o.ForeignAmount
}

// GetForeignAmountOk returns a tuple with the ForeignAmount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HoldInfoObject) GetForeignAmountOk() (*MoneyObject, bool) {
	if o == nil || o.ForeignAmount == nil {
		return nil, false
	}
	return &o.ForeignAmount, true
}

// SetForeignAmount sets field value
func (o *HoldInfoObject) SetForeignAmount(v MoneyObject) {
	o.ForeignAmount = v
}

func (o HoldInfoObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.ForeignAmount != nil {
		toSerialize["foreignAmount"] = o.ForeignAmount
	}
	return json.Marshal(toSerialize)
}

type NullableHoldInfoObject struct {
	value *HoldInfoObject
	isSet bool
}

func (v NullableHoldInfoObject) Get() *HoldInfoObject {
	return v.value
}

func (v *NullableHoldInfoObject) Set(val *HoldInfoObject) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldInfoObject) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldInfoObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldInfoObject(val *HoldInfoObject) *NullableHoldInfoObject {
	return &NullableHoldInfoObject{value: val, isSet: true}
}

func (v NullableHoldInfoObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldInfoObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


