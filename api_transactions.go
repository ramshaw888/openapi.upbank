/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// TransactionsApiService TransactionsApi service
type TransactionsApiService service

type ApiAccountsAccountIdTransactionsGetRequest struct {
	ctx _context.Context
	ApiService *TransactionsApiService
	accountId string
	pageSize *int32
	filterStatus *TransactionStatusEnum
	filterSince *time.Time
	filterUntil *time.Time
	filterCategory *string
	filterTag *string
}

// The number of records to return in each page. 
func (r ApiAccountsAccountIdTransactionsGetRequest) PageSize(pageSize int32) ApiAccountsAccountIdTransactionsGetRequest {
	r.pageSize = &pageSize
	return r
}
// The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;. 
func (r ApiAccountsAccountIdTransactionsGetRequest) FilterStatus(filterStatus TransactionStatusEnum) ApiAccountsAccountIdTransactionsGetRequest {
	r.filterStatus = &filterStatus
	return r
}
// The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
func (r ApiAccountsAccountIdTransactionsGetRequest) FilterSince(filterSince time.Time) ApiAccountsAccountIdTransactionsGetRequest {
	r.filterSince = &filterSince
	return r
}
// The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
func (r ApiAccountsAccountIdTransactionsGetRequest) FilterUntil(filterUntil time.Time) ApiAccountsAccountIdTransactionsGetRequest {
	r.filterUntil = &filterUntil
	return r
}
// The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response. 
func (r ApiAccountsAccountIdTransactionsGetRequest) FilterCategory(filterCategory string) ApiAccountsAccountIdTransactionsGetRequest {
	r.filterCategory = &filterCategory
	return r
}
// A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
func (r ApiAccountsAccountIdTransactionsGetRequest) FilterTag(filterTag string) ApiAccountsAccountIdTransactionsGetRequest {
	r.filterTag = &filterTag
	return r
}

func (r ApiAccountsAccountIdTransactionsGetRequest) Execute() (ListTransactionsResponse, *_nethttp.Response, error) {
	return r.ApiService.AccountsAccountIdTransactionsGetExecute(r)
}

/*
AccountsAccountIdTransactionsGet List transactions by account

Retrieve a list of all transactions for a specific account. The returned
list is [paginated](#pagination) and can be scrolled by following the
`next` and `prev` links where present. To narrow the results to a
specific date range pass one or both of `filter[since]` and
`filter[until]` in the query string. These filter parameters
**should not** be used for pagination. Results are ordered newest first
to oldest last.


 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The unique identifier for the account. 
 @return ApiAccountsAccountIdTransactionsGetRequest
*/
func (a *TransactionsApiService) AccountsAccountIdTransactionsGet(ctx _context.Context, accountId string) ApiAccountsAccountIdTransactionsGetRequest {
	return ApiAccountsAccountIdTransactionsGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return ListTransactionsResponse
func (a *TransactionsApiService) AccountsAccountIdTransactionsGetExecute(r ApiAccountsAccountIdTransactionsGetRequest) (ListTransactionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListTransactionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsApiService.AccountsAccountIdTransactionsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{accountId}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", _neturl.PathEscape(parameterToString(r.accountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page[size]", parameterToString(*r.pageSize, ""))
	}
	if r.filterStatus != nil {
		localVarQueryParams.Add("filter[status]", parameterToString(*r.filterStatus, ""))
	}
	if r.filterSince != nil {
		localVarQueryParams.Add("filter[since]", parameterToString(*r.filterSince, ""))
	}
	if r.filterUntil != nil {
		localVarQueryParams.Add("filter[until]", parameterToString(*r.filterUntil, ""))
	}
	if r.filterCategory != nil {
		localVarQueryParams.Add("filter[category]", parameterToString(*r.filterCategory, ""))
	}
	if r.filterTag != nil {
		localVarQueryParams.Add("filter[tag]", parameterToString(*r.filterTag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTransactionsGetRequest struct {
	ctx _context.Context
	ApiService *TransactionsApiService
	pageSize *int32
	filterStatus *TransactionStatusEnum
	filterSince *time.Time
	filterUntil *time.Time
	filterCategory *string
	filterTag *string
}

// The number of records to return in each page. 
func (r ApiTransactionsGetRequest) PageSize(pageSize int32) ApiTransactionsGetRequest {
	r.pageSize = &pageSize
	return r
}
// The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;. 
func (r ApiTransactionsGetRequest) FilterStatus(filterStatus TransactionStatusEnum) ApiTransactionsGetRequest {
	r.filterStatus = &filterStatus
	return r
}
// The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
func (r ApiTransactionsGetRequest) FilterSince(filterSince time.Time) ApiTransactionsGetRequest {
	r.filterSince = &filterSince
	return r
}
// The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
func (r ApiTransactionsGetRequest) FilterUntil(filterUntil time.Time) ApiTransactionsGetRequest {
	r.filterUntil = &filterUntil
	return r
}
// The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response. 
func (r ApiTransactionsGetRequest) FilterCategory(filterCategory string) ApiTransactionsGetRequest {
	r.filterCategory = &filterCategory
	return r
}
// A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
func (r ApiTransactionsGetRequest) FilterTag(filterTag string) ApiTransactionsGetRequest {
	r.filterTag = &filterTag
	return r
}

func (r ApiTransactionsGetRequest) Execute() (ListTransactionsResponse, *_nethttp.Response, error) {
	return r.ApiService.TransactionsGetExecute(r)
}

/*
TransactionsGet List transactions

Retrieve a list of all transactions across all accounts for the currently
authenticated user. The returned list is [paginated](#pagination) and can
be scrolled by following the `next` and `prev` links where present. To
narrow the results to a specific date range pass one or both of
`filter[since]` and `filter[until]` in the query string. These filter
parameters **should not** be used for pagination. Results are ordered
newest first to oldest last.


 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTransactionsGetRequest
*/
func (a *TransactionsApiService) TransactionsGet(ctx _context.Context) ApiTransactionsGetRequest {
	return ApiTransactionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListTransactionsResponse
func (a *TransactionsApiService) TransactionsGetExecute(r ApiTransactionsGetRequest) (ListTransactionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListTransactionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsApiService.TransactionsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page[size]", parameterToString(*r.pageSize, ""))
	}
	if r.filterStatus != nil {
		localVarQueryParams.Add("filter[status]", parameterToString(*r.filterStatus, ""))
	}
	if r.filterSince != nil {
		localVarQueryParams.Add("filter[since]", parameterToString(*r.filterSince, ""))
	}
	if r.filterUntil != nil {
		localVarQueryParams.Add("filter[until]", parameterToString(*r.filterUntil, ""))
	}
	if r.filterCategory != nil {
		localVarQueryParams.Add("filter[category]", parameterToString(*r.filterCategory, ""))
	}
	if r.filterTag != nil {
		localVarQueryParams.Add("filter[tag]", parameterToString(*r.filterTag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTransactionsIdGetRequest struct {
	ctx _context.Context
	ApiService *TransactionsApiService
	id string
}


func (r ApiTransactionsIdGetRequest) Execute() (GetTransactionResponse, *_nethttp.Response, error) {
	return r.ApiService.TransactionsIdGetExecute(r)
}

/*
TransactionsIdGet Retrieve transaction

Retrieve a specific transaction by providing its unique identifier.


 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the transaction. 
 @return ApiTransactionsIdGetRequest
*/
func (a *TransactionsApiService) TransactionsIdGet(ctx _context.Context, id string) ApiTransactionsIdGetRequest {
	return ApiTransactionsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetTransactionResponse
func (a *TransactionsApiService) TransactionsIdGetExecute(r ApiTransactionsIdGetRequest) (GetTransactionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetTransactionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsApiService.TransactionsIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
